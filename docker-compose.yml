# docker-compose.yml
# PoC middleware stack for laptop/DO droplet.
# Lightweight defaults, comments inline.

services:

  traefik:
    image: traefik:v2.11
    profiles: ["core"]
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=INFO
      - --providers.docker.exposedbydefault=false
    ports:
      - "80:80"      # http
      - "443:443"    # https
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./traefik/config:/etc/traefik/config:ro
      - ./traefik/certs:/etc/traefik/certs:ro # We will place the certs here
    networks:
      - alpinenet

  vault:
    image: vault:1.13.2
    profiles: ["extra"]
    container_name: vault
    restart: unless-stopped
    environment:
      VAULT_ADDR: http://127.0.0.1:8200
    command: "server -dev -dev-root-token-id=root"   # dev mode only
    ports:
      - "8200:8200"
    networks:
      - alpinenet
    mem_limit: 300m

  minio:
    image: minio/minio:latest
    profiles: ["extra"]
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - alpinenet
    mem_limit: 400m

  postgres:
    image: postgres:17
    profiles: ["core"]
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - alpinenet
    mem_limit: 700m

  mongo:
    image: mongo:6.0
    profiles: ["extra"]
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodata:/data/db
    networks:
      - alpinenet
    mem_limit: 700m

  redis:
    image: redis:7-alpine
    profiles: ["core"]
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1"]
    networks:
      - alpinenet
    mem_limit: 200m


  n8n:
    image: n8nio/n8n:latest
    profiles: ["core"]
    container_name: n8n
    restart: unless-stopped
 
    environment:
      DB_TYPE: postgres
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      N8N_HOST: n8n.helix.local
      N8N_PORT: 5678          # keep this internal port
      N8N_PROTOCOL: http      # internal traffic stays http
      WEBHOOK_URL: https://n8n.helix.local/   # external URL override
      GENERIC_TIMEZONE: "Europe/Zurich"
      N8N_BASIC_AUTH_ACTIVE: "false"

    # Remove the ports mapping here, as Traefik handles the exposure
    # ports:
    #   - "5678:5678"
    depends_on:
      - postgres
      - redis
    networks:
      - alpinenet
    mem_limit: 700m

  portainer:
    image: portainer/portainer-ce:latest
    profiles: ["core"]
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - alpinenet

  # Ollama with TinyLlama (local lightweight dev mode)
  # Ollama with TinyLlama (local lightweight dev mode)
  ollama-tiny:
    image: ollama/ollama:latest
    profiles: ["tiny"]
    container_name: ollama-tiny
    restart: unless-stopped
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "11434:11434"   # Tiny exposed on 11434
    networks:
      - alpinenet
    environment:
      OLLAMA_MODEL: "tinyllama"
    command: >
      sh -c "ollama serve & sleep 5 && ollama pull tinyllama && tail -f /dev/null"

  # Ollama Turbo (simulated GPU-backed mode)
  ollama-turbo:
    image: ollama/ollama:latest
    profiles: ["turbo"]
    container_name: ollama-turbo
    restart: unless-stopped
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - alpinenet
    environment:
      OLLAMA_MODEL: "turbo"
    command: >
      sh -c "ollama serve & sleep 5 && ollama pull turbo && tail -f /dev/null"

  web-ui:
    image: nginx:stable-alpine
    profiles: ["core"]
    container_name: demo-ui
    restart: unless-stopped
    volumes:
      - ./ui/:/usr/share/nginx/html:ro
    ports:
      - "3000:80"
    networks:
      - alpinenet
    mem_limit: 150m
  kong:
    image: kong:3.6
    profiles: ["core"]
    container_name: kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/config/kong.yaml # path inside container
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: "notice"
    volumes:
      - ./kong:/kong:ro
    ports:
      - "8001:8001"  # admin (keep firewalled / local)
    networks:
      - alpinenet

networks:
  alpinenet:
    driver: bridge

volumes:
  minio-data:
  pgdata:
  mongodata:
  ollama-data:
  portainer_data:
